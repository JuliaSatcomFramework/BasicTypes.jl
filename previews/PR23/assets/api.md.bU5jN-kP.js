import{_ as p,c as h,j as i,a as t,G as e,a7 as n,w as l,B as k,o}from"./chunks/framework.BMVocD-_.js";const ls=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),r={name:"api.md"},d={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},W={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},$={class:"jldocstring custom-block",open:""},Y={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""};function Z(ss,s,is,as,es,ts){const a=k("Badge");return o(),h("div",null,[s[164]||(s[164]=i("h1",{id:"API",tabindex:"-1"},[t("API "),i("a",{class:"header-anchor",href:"#API","aria-label":'Permalink to "API {#API}"'},"​")],-1)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"BasicTypes.NotSet",href:"#BasicTypes.NotSet"},[i("span",{class:"jlbinding"},"BasicTypes.NotSet")],-1)),s[1]||(s[1]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NotSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Union{NotProvided, NotSimulated}</span></span></code></pre></div>',1)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[2]||(s[2]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L20-L22",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",y,[i("summary",null,[s[4]||(s[4]=i("a",{id:"BasicTypes.Optional",href:"#BasicTypes.Optional"},[i("span",{class:"jlbinding"},"BasicTypes.Optional")],-1)),s[5]||(s[5]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Optional{T} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Union{T, NotProvided, NotSimulated}</span></span></code></pre></div><p>This type alias is used to represent an optional value, mostly for use as type of struct fields for which a default value (either <code>NotProvided</code> or <code>NotSimulated</code>) is expected and used as default in the type&#39;s constructor.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[6]||(s[6]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L25-L29",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",c,[i("summary",null,[s[8]||(s[8]=i("a",{id:"BasicTypes.Point",href:"#BasicTypes.Point"},[i("span",{class:"jlbinding"},"BasicTypes.Point")],-1)),s[9]||(s[9]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Point{N,T} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Union{Tuple{Vararg{T, N}},SVector{N,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Point2D </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Point{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Union{Real, Unitful</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Quantity{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Point3D </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Point{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Union{Real, Unitful</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Quantity{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}}</span></span></code></pre></div>`,1)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[10]||(s[10]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/type_aliases.jl#L5-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",g,[i("summary",null,[s[12]||(s[12]=i("a",{id:"BasicTypes.EmptyIterator",href:"#BasicTypes.EmptyIterator"},[i("span",{class:"jlbinding"},"BasicTypes.EmptyIterator")],-1)),s[13]||(s[13]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[15]||(s[15]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EmptyIterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Abstract type which defines methods so that concrete subtypes behave as empty iterators, so that the code:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Do something</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>where <code>T &lt;: EmptyIterator</code> will simply do nothing.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[14]||(s[14]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/types.jl#L1-L11",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",u,[i("summary",null,[s[16]||(s[16]=i("a",{id:"BasicTypes.ExtraOutput",href:"#BasicTypes.ExtraOutput"},[i("span",{class:"jlbinding"},"BasicTypes.ExtraOutput")],-1)),s[17]||(s[17]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[19]||(s[19]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExtraOutput</span></span></code></pre></div><p>Singleton type used for dispatch, and specifically to create function methods that return more than one output.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[18]||(s[18]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/types.jl#L25-L30",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",E,[i("summary",null,[s[20]||(s[20]=i("a",{id:"BasicTypes.NoTrait",href:"#BasicTypes.NoTrait"},[i("span",{class:"jlbinding"},"BasicTypes.NoTrait")],-1)),s[21]||(s[21]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NoTrait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Singleton type used to indicate that a trait is not implemented, resorting the eventual default behavior.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[22]||(s[22]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/types.jl#L33-L38",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",F,[i("summary",null,[s[24]||(s[24]=i("a",{id:"BasicTypes.NotFound",href:"#BasicTypes.NotFound"},[i("span",{class:"jlbinding"},"BasicTypes.NotFound")],-1)),s[25]||(s[25]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[27]||(s[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NotFound</span></span></code></pre></div><p>Singletone type used as return type of some functions in this package to clearly identified that the desired output could not be found</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[26]||(s[26]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/types.jl#L18-L22",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",b,[i("summary",null,[s[28]||(s[28]=i("a",{id:"BasicTypes.NotProvided",href:"#BasicTypes.NotProvided"},[i("span",{class:"jlbinding"},"BasicTypes.NotProvided")],-1)),s[29]||(s[29]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[31]||(s[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NotProvided </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EmptyIterator</span></span></code></pre></div><p>Type used to specify that a field is not provided. This is useful when a field is optional and the user wants to specify that it is not provided, instead of using <code>nothing</code> which could be a valid value for the field.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[30]||(s[30]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L1-L7",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",f,[i("summary",null,[s[32]||(s[32]=i("a",{id:"BasicTypes.NotSimulated",href:"#BasicTypes.NotSimulated"},[i("span",{class:"jlbinding"},"BasicTypes.NotSimulated")],-1)),s[33]||(s[33]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[35]||(s[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NotSimulated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EmptyIterator</span></span></code></pre></div><p>Custom type to indicate that a certain operation or function is not simulated. Used mostly for dispatch and for explicitly indicating that something should be skipped during the simulation (without relying on <code>nothing</code> or <code>missing</code>).</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[34]||(s[34]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L10-L17",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",m,[i("summary",null,[s[36]||(s[36]=i("a",{id:"BasicTypes.PropertyOrNothing",href:"#BasicTypes.PropertyOrNothing"},[i("span",{class:"jlbinding"},"BasicTypes.PropertyOrNothing")],-1)),s[37]||(s[37]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[39]||(s[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PropertyOrNothing{name}</span></span></code></pre></div><p>Singleton structure that can be used as a functor of the form:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PropertyOrNothing{name}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(object)</span></span></code></pre></div><p>to extract the property <code>name</code> from the provided object, falling back to returning <code>nothing</code> if the provided object does not have a property called <code>name</code>.</p><p>This is mostly useful as a fallback (or part of a fallback) to be used with <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/api#BasicTypes.getproperty_oftype-Union{Tuple{F}, Tuple{C}, Tuple{Any, C}, Tuple{Any, C, F}} where {C, F}"><code>getproperty_oftype</code></a>.</p>',5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[38]||(s[38]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/getproperty_oftype.jl#L75-L85",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",C,[i("summary",null,[s[40]||(s[40]=i("a",{id:"BasicTypes.SkipChecks",href:"#BasicTypes.SkipChecks"},[i("span",{class:"jlbinding"},"BasicTypes.SkipChecks")],-1)),s[41]||(s[41]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[43]||(s[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SkipChecks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Singleton type used for dispatch to indicate that a certain check should be skipped.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[42]||(s[42]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/types.jl#L42-L46",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",T,[i("summary",null,[s[44]||(s[44]=i("a",{id:"BasicTypes.base_unit-Tuple{Unitful.Quantity}",href:"#BasicTypes.base_unit-Tuple{Unitful.Quantity}"},[i("span",{class:"jlbinding"},"BasicTypes.base_unit")],-1)),s[45]||(s[45]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">base_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Units</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">base_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the SI base unit for the dimension of the provided unit or quantity. In case of angles, the <code>base_unit</code> returns <code>u&quot;rad&quot;</code> when the input is either <code>u&quot;°&quot;</code> or <code>u&quot;rad&quot;</code>.</p>`,2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[46]||(s[46]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/units.jl#L21-L27",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",v,[i("summary",null,[s[48]||(s[48]=i("a",{id:"BasicTypes.basetype-Tuple{Type}",href:"#BasicTypes.basetype-Tuple{Type}"},[i("span",{class:"jlbinding"},"BasicTypes.basetype")],-1)),s[49]||(s[49]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[51]||(s[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">basetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span></code></pre></div><p>Returns the type of <code>t</code>, removing type parameters if for parametric types (thus returning the more generic UnionAll type for <code>typeof(t)</code>)</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">basetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Complex{Float64})) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Complex</span></span></code></pre></div>',3)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[50]||(s[50]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/functions.jl#L67-L76",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",B,[i("summary",null,[s[52]||(s[52]=i("a",{id:"BasicTypes.bypass_bottom-Tuple{Type, Type}",href:"#BasicTypes.bypass_bottom-Tuple{Type, Type}"},[i("span",{class:"jlbinding"},"BasicTypes.bypass_bottom")],-1)),s[53]||(s[53]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[55]||(s[55]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bypass_bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(candidate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This function takes as input two types, a <code>candidate</code> and a <code>fallback</code>, and returns <code>candidate</code> unless <code>candidate === Union{}</code> in which case it returns <code>fallback</code>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[54]||(s[54]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L148-L152",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",j,[i("summary",null,[s[56]||(s[56]=i("a",{id:"BasicTypes.change_valuetype",href:"#BasicTypes.change_valuetype"},[i("span",{class:"jlbinding"},"BasicTypes.change_valuetype")],-1)),s[57]||(s[57]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[59]||(s[59]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">change_valuetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">change_valuetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Change the type of the value contained in <code>x</code> to <code>T</code>.</p><p>If <code>x</code> is a primitive type like <code>Number</code>, this will convert <code>x</code> to <code>T</code> and return it. If <code>x</code> is a container type like <code>SVector{T}</code>, this will convert the elements of <code>x</code> to <code>T</code>.</p><p>The second method with just a single argument being a <code>type::Type</code> is simply a convenience method equivalent to <code>Base.Fix1(change_valuetype, type)</code></p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[58]||(s[58]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/valuetype.jl#L18-L28",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",A,[i("summary",null,[s[60]||(s[60]=i("a",{id:"BasicTypes.common_valuetype",href:"#BasicTypes.common_valuetype"},[i("span",{class:"jlbinding"},"BasicTypes.common_valuetype")],-1)),s[61]||(s[61]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[63]||(s[63]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">common_valuetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{BaseType}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{DefaultType}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Determine the common value type of the arguments <code>args...</code>, ensuring it is a subtype of <code>BaseType</code>. For args that are containers, such as <code>AbstractArray{T}</code>, the common value type is determined by the element type <code>T</code>.</p><p>If the promoted value type of <code>args...</code> is not a subtype of <code>BaseType</code>, then <code>DefaultType</code> is returned instead.</p><p><strong>Arguments</strong></p><ul><li><p><code>BaseType::Type</code>: The required base type for the common value type.</p></li><li><p><code>DefaultType::Type</code>: The fallback type if the common value type is not a subtype of <code>BaseType</code>.</p></li><li><p><code>args...</code>: Arguments from which to determine the common value type.</p></li></ul><p><strong>Returns</strong></p><p>The common value type of <code>args...</code>, or <code>DefaultType</code> if the common type is not a subtype of <code>BaseType</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> common_valuetype</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> common_valuetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AbstractFloat, Float64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> common_valuetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AbstractFloat, Float64, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;what&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For the string, \`valuetype\` returns \`Union{}\` so it&#39; bypassed by during promotion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float32</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> common_valuetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AbstractFloat, Float64, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;what&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Still use default in case \`Union{}\` is the only returned valuetype</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64</span></span></code></pre></div>`,9)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[62]||(s[62]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/valuetype.jl#L35-L64",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",D,[i("summary",null,[s[64]||(s[64]=i("a",{id:"BasicTypes.constructor_without_checks",href:"#BasicTypes.constructor_without_checks"},[i("span",{class:"jlbinding"},"BasicTypes.constructor_without_checks")],-1)),s[65]||(s[65]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[67]||(s[67]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor_without_checks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Custom types <code>T</code> with inner constructors that do checks on inputs may want to implement a method for this function where <code>T</code> is the specific type and <code>args...</code> are just the fields of <code>T</code>.</p><p>This method must be defined inside the struct definition and should simply return <code>new(args...)</code>, as a way to create an instance of the type without running the potentially expensive checks.</p><p>This is especially useful for internal methods that might already know that the inputs are valid and within bounds, so they can skip the checks.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyType{T}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #= </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    This is an unsafe constructor that skips all the input checks, we have this as our only inner constructor. </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    The \`CoordinateSystemsBase\` is important (even if explicitly imported in the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    parent module), or a local function with the same name will be created in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    the local scope of the struct definition body.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    =#</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BasicTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor_without_checks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MyType{T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> new{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># We define the constructor with checks as an outer one, but we could have also done this inside the struct definition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyType</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # do some input checks...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    validated_x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> check_x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    validated_y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> check_y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Return the potentially modified inputs, if we had this as inner constructor this last line would be \`new{T}(validated_x, validated_y)\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BasicTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor_without_checks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyType{T}, validated_x, validated_y)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,6)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[66]||(s[66]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/functions.jl#L1-L36",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",w,[i("summary",null,[s[68]||(s[68]=i("a",{id:"BasicTypes.enforce_unit-Tuple{Any, Real, Unitful.Units}",href:"#BasicTypes.enforce_unit-Tuple{Any, Real, Unitful.Units}"},[i("span",{class:"jlbinding"},"BasicTypes.enforce_unit")],-1)),s[69]||(s[69]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[71]||(s[71]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference, value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [interpret_as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Units</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Takes the provided unitless <code>value</code> and converts it to the unit specified by <code>reference</code>. The number is interpreted as the unit specified by <code>interpret_as</code> (if provided) or as the preferred base unit of <code>reference</code> otherwise.</p><p>If <code>reference</code> is a Quantity, the same data type is used for the returned Quantity.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Lengths are interpreted as meters by default</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> km</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Weights use kg by default</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0e6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;°&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Angles are interpreted as radians</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">°</span></span></code></pre></div><p>See also: <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/api#BasicTypes.enforce_unit-Tuple{Any, Real, Unitful.Units}"><code>enforce_unit(reference, value::Unitful.Quantity)</code></a></p>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[70]||(s[70]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/units.jl#L101-L121",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",x,[i("summary",null,[s[72]||(s[72]=i("a",{id:"BasicTypes.enforce_unit-Tuple{Unitful.Units, Unitful.Quantity}",href:"#BasicTypes.enforce_unit-Tuple{Unitful.Units, Unitful.Quantity}"},[i("span",{class:"jlbinding"},"BasicTypes.enforce_unit")],-1)),s[73]||(s[73]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[75]||(s[75]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference, value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference)</span></span></code></pre></div><p>Takes the provided value quantity and converts it to the unit provided as <code>reference</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The provided <code>reference</code> must represent a unit compatible with the unit expected from <code>value</code>.</p></div><p>In case only <code>reference</code> is provided (second signature above), this function simply returns <code>Base.Fix1(enforce_unit, reference)</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>reference</code>: The unit to convert <code>value</code> to. It can be an instance from one of the following types:</p><ul><li><p><code>Unitful.Units</code>: e.g. u&quot;m&quot;.</p></li><li><p><code>Type{&lt;:Quantity}</code>: e.g. typeof(1u&quot;°&quot;).</p></li><li><p><code>Quantity</code>: e.g. 2f0 * u&quot;m/s&quot;.</p></li></ul></li><li><p><code>value</code>: The quantity to convert.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2f0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km/h&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Throws as units are not compatible</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DimensionError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">km) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Also converts to Float32 as the provided reference is a Float32 quantity</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rad&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">°) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Also converts to Float32 as the provided reference is a Float32 quantity</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.17453292f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rad</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Providing a quantity directly also tries to enforce the precision</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InexactError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This will not enforce precision</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> km</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">km </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">∘</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> float </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test the method returning a function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m</span></span></code></pre></div><p>See also: <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/units#BasicTypes.enforce_unitless"><code>enforce_unitless</code></a></p>`,9)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[74]||(s[74]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/units.jl#L54-L96",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",S,[i("summary",null,[s[76]||(s[76]=i("a",{id:"BasicTypes.enforce_unitless-Tuple{Any, Any}",href:"#BasicTypes.enforce_unitless-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"BasicTypes.enforce_unitless")],-1)),s[77]||(s[77]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[79]||(s[79]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference, value)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference)</span></span></code></pre></div><p>Takes the provided <code>value</code> (supposed to represent a quantity tied to a specific unit), converts it to the unit represented by <code>reference</code> and then strips the units. This will simply call <code>ustrip(enforce_unit(reference, value))</code>.</p><p>If only <code>reference</code> is provided (second signature above), this function simply returns <code>Base.Fix1(enforce_unitless, reference)</code>.</p><p>See <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/units#BasicTypes.enforce_unit"><code>enforce_unit</code></a> for more details on the supported argument types.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">km)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000.0f0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">km </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">∘</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> float </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test the method returning a function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000.0</span></span></code></pre></div>`,6)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[78]||(s[78]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/units.jl#L129-L154",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",L,[i("summary",null,[s[80]||(s[80]=i("a",{id:"BasicTypes.fallback",href:"#BasicTypes.fallback"},[i("span",{class:"jlbinding"},"BasicTypes.fallback")],-1)),s[81]||(s[81]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[83]||(s[83]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the first value in the arguments which is set, i.e. is not equal to <code>NotProvided</code> or <code>NotSimulated</code>. If no value is found, an <code>ArgumentError</code> is thrown.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NotProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NotSimulated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span></span></code></pre></div>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[82]||(s[82]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L56-L70",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",N,[i("summary",null,[s[84]||(s[84]=i("a",{id:"BasicTypes.field_oftype-Union{Tuple{F}, Tuple{Any, F}} where F",href:"#BasicTypes.field_oftype-Union{Tuple{F}, Tuple{Any, F}} where F"},[i("span",{class:"jlbinding"},"BasicTypes.field_oftype")],-1)),s[85]||(s[85]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[87]||(s[87]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">field_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, comparison)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">field_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OBJ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, comparison)</span></span></code></pre></div><p>Function that leverages <code>fieldname_oftype</code> to extract the field (or field type in case type is passed as first argument) returned by <code>fieldname_oftype(typeof(obj), comparison)</code></p><p>In case no field satisfying the comparison is found, this function returns an instance of the singleton type <code>NotFound</code> defined within this package.</p><p>This is the base of the <code>getproperty_oftype</code> function and should basically completely resolve at compile time allowing flexible property access without runtime penalty.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[86]||(s[86]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/getproperty_oftype.jl#L54-L63",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",O,[i("summary",null,[s[88]||(s[88]=i("a",{id:"BasicTypes.fieldidx_oftype-Union{Tuple{F}, Tuple{Type, F}} where F",href:"#BasicTypes.fieldidx_oftype-Union{Tuple{F}, Tuple{Type, F}} where F"},[i("span",{class:"jlbinding"},"BasicTypes.fieldidx_oftype")],-1)),s[89]||(s[89]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[91]||(s[91]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fieldidx_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OBJ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, comparison</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fieldidx_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OBJ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, supertype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extracts the field index of the first field of the type <code>OBJ</code> for which <code>comparison(fieldtype) === true</code>. If no field satisfying the comparison function is found, this simply return -1 to keep the function type stable (always returning an <code>Int</code>).</p><p>If the second argument is a type, this simply translates to the following comparison function:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    comparison </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> supertype</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Since v1.18.0, this function is used within the implementation of <code>fieldname_oftype</code>.</p></div>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[90]||(s[90]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/getproperty_oftype.jl#L3-L17",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",U,[i("summary",null,[s[92]||(s[92]=i("a",{id:"BasicTypes.fieldname_oftype-Union{Tuple{F}, Tuple{Type, F}} where F",href:"#BasicTypes.fieldname_oftype-Union{Tuple{F}, Tuple{Type, F}} where F"},[i("span",{class:"jlbinding"},"BasicTypes.fieldname_oftype")],-1)),s[93]||(s[93]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[95]||(s[95]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fieldname_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OBJ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, comparison</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fieldname_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OBJ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, supertype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extracts the field name of the first field of the type <code>OBJ</code> for which <code>comparison(fieldtype) === true</code>. If no field satisfying the comparison function is found, this simply return a dummy Symbol (whose value is stored inside the package-internal constant global <code>FIELDNAME_NOT_FOUND_SYMBOL</code>).</p><p>If the second argument is a type, this simply translates to the following comparison function:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    comparison </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> supertype</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Since v1.18.0, this function relies on <code>fieldidx_oftype</code> to find the field index.</p></div>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[94]||(s[94]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/getproperty_oftype.jl#L31-L45",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",q,[i("summary",null,[s[96]||(s[96]=i("a",{id:"BasicTypes.getproperty_oftype-Union{Tuple{F}, Tuple{C}, Tuple{Any, C}, Tuple{Any, C, F}} where {C, F}",href:"#BasicTypes.getproperty_oftype-Union{Tuple{F}, Tuple{C}, Tuple{Any, C}, Tuple{Any, C, F}} where {C, F}"},[i("span",{class:"jlbinding"},"BasicTypes.getproperty_oftype")],-1)),s[97]||(s[97]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[99]||(s[99]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getproperty_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(container, target_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fallback, default)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getproperty_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(container, target_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fallback, exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getproperty_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(container, target_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[, fallback]; exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the first field of <code>container</code> which satisfies <code>field isa target_type</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>When the type of a specific field (as returned by <code>fieldtype</code>) is <code>Optional{T}</code> (with <code>T</code> being any arbitrary type), the function will actually tests for <code>T &lt;: target_type</code> rather than <code>Optional{T} &lt;: target_type</code></p></div><p>In case no field is found this way, the function will try to extract the desired property calling <code>fallback(container)</code>.</p><p>If <code>fallback(container)</code> returns <code>nothing</code>, the function will finally return the provided <code>default</code>, or throw the provided <code>exception</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This function can not be called with a <code>target_type === Optional</code> or <code>target_type &lt;: Union{Nothing, NotSet}</code>.</p></div><p>The second method is a convenience methdo which allow customizing the default exception thrown when <code>fallback(container)</code> returns nothing, and defaults <code>fallback = Returns(nothing)</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @kwdef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optional{String}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NotProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getproperty_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), String) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Returns field \`c\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getproperty_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), String) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Still returns \`c\` even if its value is not actually a String as its field is \`Optional{String}\`</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NotProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getproperty_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), ComplexF64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PropertyOrNothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This will return field \`:b\` as fallback</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getproperty_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), ComplexF64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PropertyOrNothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This will fail the type check and the fallback, and returns 15</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # This throws an error as it couldn&#39;t find a field with the right type and has no fallback</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           getproperty_oftype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((; a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), String; exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ArgumentError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPS&quot;</span></span></code></pre></div>`,9)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[98]||(s[98]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/getproperty_oftype.jl#L97-L147",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",M,[i("summary",null,[s[100]||(s[100]=i("a",{id:"BasicTypes.isnotset-Tuple{Any}",href:"#BasicTypes.isnotset-Tuple{Any}"},[i("span",{class:"jlbinding"},"BasicTypes.isnotset")],-1)),s[101]||(s[101]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[103]||(s[103]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isnotset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Return <code>true</code> if <code>x</code> is not set to a value. (That is, <code>x</code> is either <code>NotProvided</code> or <code>NotSimulated</code>)</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[102]||(s[102]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L32-L37",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",_,[i("summary",null,[s[104]||(s[104]=i("a",{id:"BasicTypes.isprovided-Tuple{Any}",href:"#BasicTypes.isprovided-Tuple{Any}"},[i("span",{class:"jlbinding"},"BasicTypes.isprovided")],-1)),s[105]||(s[105]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[107]||(s[107]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isprovided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool</span></span></code></pre></div><p>Check if the value <code>x</code> is not of type <code>NotProvided</code>. Returns <code>true</code> if <code>x</code> is provided, otherwise <code>false</code>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[106]||(s[106]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L40-L45",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",R,[i("summary",null,[s[108]||(s[108]=i("a",{id:"BasicTypes.issimulated-Tuple{Any}",href:"#BasicTypes.issimulated-Tuple{Any}"},[i("span",{class:"jlbinding"},"BasicTypes.issimulated")],-1)),s[109]||(s[109]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[111]||(s[111]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issimulated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool</span></span></code></pre></div><p>Check if <code>x</code> is simulated by verifying its type is not <code>NotSimulated</code>. Returns <code>true</code> if <code>x</code> is simulated, <code>false</code> otherwise.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[110]||(s[110]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L48-L53",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",P,[i("summary",null,[s[112]||(s[112]=i("a",{id:"BasicTypes.progress_logger-Tuple{}",href:"#BasicTypes.progress_logger-Tuple{}"},[i("span",{class:"jlbinding"},"BasicTypes.progress_logger")],-1)),s[113]||(s[113]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[115]||(s[115]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">progress_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the logger to use for progress monitoring via ProgressLogging.jl.</p><p>When called from the REPL (checking the <code>isinteractive</code> function), it will return a TeeLogger (from LoggingExtras.jl) containing the current logger and a <code>TerminalLogger</code> (from TerminalLoggers.jl). This is because the <code>@progress</code> macro from ProgressLogging.jl does not print the progress bar in the REPL without <code>TerminalLogger</code>.</p><p>Outside of interactive sessions, it will simply return the current logger.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[114]||(s[114]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/functions.jl#L53-L63",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",I,[i("summary",null,[s[116]||(s[116]=i("a",{id:"BasicTypes.promote_valuetype",href:"#BasicTypes.promote_valuetype"},[i("span",{class:"jlbinding"},"BasicTypes.promote_valuetype")],-1)),s[117]||(s[117]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[119]||(s[119]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">promote_valuetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{BaseType}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{DefaultType}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Cbange the value type of the arguments <code>args...</code> to a common type that is a subtype of <code>BaseType</code>. For args that are containers, such as <code>AbstractArray{T}</code>, the type of the underlying elements is changed. If the promoted value type of <code>args...</code> is not a subtype of <code>BaseType</code>, then <code>DefaultType</code> is used instead.</p><p><strong>Arguments</strong></p><ul><li><p><code>BaseType::Type</code>: The required base type for the common value type.</p></li><li><p><code>DefaultType::Type</code>: The fallback type if the common value type is not a subtype of <code>BaseType</code>.</p></li><li><p><code>args...</code>: Arguments to convert to the common value type.</p></li></ul><p><strong>Returns</strong></p><p>The arguments <code>args...</code> with their value types changed to a common type that is a subtype of <code>BaseType</code>.</p>',6)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[118]||(s[118]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/valuetype.jl#L71-L85",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",J,[i("summary",null,[s[120]||(s[120]=i("a",{id:"BasicTypes.raw_angle-Tuple{Union{Real, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{°,, NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{rad,, NoDims, nothing}}} where T}",href:"#BasicTypes.raw_angle-Tuple{Union{Real, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{°,, NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{rad,, NoDims, nothing}}} where T}"},[i("span",{class:"jlbinding"},"BasicTypes.raw_angle")],-1)),s[121]||(s[121]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[123]||(s[123]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw_angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [rounding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RoundingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Returns the angle in radians as a unitless number. The optional <code>rounding</code> argument can be used to wrap the returned value within <code>[0, 2π)</code> using the specified rounding mode. ```</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[122]||(s[122]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/units.jl#L162-L169",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",Q,[i("summary",null,[s[124]||(s[124]=i("a",{id:"BasicTypes.raw_distance-Tuple{Union{Real, Unitful.Quantity{T, 𝐋}} where T}",href:"#BasicTypes.raw_distance-Tuple{Union{Real, Unitful.Quantity{T, 𝐋}} where T}"},[i("span",{class:"jlbinding"},"BasicTypes.raw_distance")],-1)),s[125]||(s[125]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[127]||(s[127]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw_distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the distance in meters as a unitless number.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[126]||(s[126]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/units.jl#L173-L177",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",V,[i("summary",null,[s[128]||(s[128]=i("a",{id:"BasicTypes.raw_mass-Tuple{Union{Real, Unitful.Quantity{T, 𝐌}} where T}",href:"#BasicTypes.raw_mass-Tuple{Union{Real, Unitful.Quantity{T, 𝐌}} where T}"},[i("span",{class:"jlbinding"},"BasicTypes.raw_mass")],-1)),s[129]||(s[129]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[131]||(s[131]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw_mass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the mass in kilograms as a unitless number.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[130]||(s[130]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/units.jl#L180-L184",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",G,[i("summary",null,[s[132]||(s[132]=i("a",{id:"BasicTypes.raw_time-Tuple{Union{Dates.Day, Dates.Hour, Dates.Microsecond, Dates.Millisecond, Dates.Minute, Dates.Nanosecond, Dates.Second, Dates.Week, Real, Unitful.Quantity{T, 𝐓}} where T}",href:"#BasicTypes.raw_time-Tuple{Union{Dates.Day, Dates.Hour, Dates.Microsecond, Dates.Millisecond, Dates.Minute, Dates.Nanosecond, Dates.Second, Dates.Week, Real, Unitful.Quantity{T, 𝐓}} where T}"},[i("span",{class:"jlbinding"},"BasicTypes.raw_time")],-1)),s[133]||(s[133]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[135]||(s[135]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the time in seconds as a unitless number.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[134]||(s[134]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/units.jl#L187-L191",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",W,[i("summary",null,[s[136]||(s[136]=i("a",{id:"BasicTypes.sa_type-Tuple{UnionAll, Vararg{Any}}",href:"#BasicTypes.sa_type-Tuple{UnionAll, Vararg{Any}}"},[i("span",{class:"jlbinding"},"BasicTypes.sa_type")],-1)),s[137]||(s[137]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[139]||(s[139]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sa_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Int, TypeVar}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; unwrap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This is a helper function that simplifies creating concrete <code>StructArray</code> types for types within struct definitions.</p><p><strong>Arguments</strong></p><ul><li><p><code>DT::DataType</code>: The type of the struct to create the <code>StructArray</code> for.</p></li><li><p><code>N::Union{Int, TypeVar}</code>: Specifies the dimensions of the array stored within the resulting <code>StructArray</code> type</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ASD{G}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sa_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Complex{G}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>is equivalent to</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ASD{G}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StructArray{Complex{G}, 3, @NamedTuple{re::Array{G, 3}, im::Array{G, 3}}, Int64}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This function is defined inside an extension and is thus available only conditionally to the <code>StructArrays</code> package being explicitly imported</p></div><p><strong>Extended Help</strong></p><p>The function supports unwrapping like in the <code>StructArray</code> constructor by providing the appropriate function as the <code>unwrap</code> keyword argument.</p><p>It also supports a <code>TypeVar</code> as second argument instead of simply an <code>Int</code>. This is useful for creating complex composite types like in the example below.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@kwdef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InnerField</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Complex{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComplexF64)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@kwdef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CompositeStruct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">InnerField</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> InnerField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SAField{N}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sa_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CompositeStruct, N; unwrap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> InnerField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">saf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SAField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StructArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompositeStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; unwrap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> InnerField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span></code></pre></div><p>where the <code>SAField</code> type has a fully concrete type for it&#39;s field <code>sa</code> which would be quite complex to specify manually</p>`,14)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[138]||(s[138]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/functions.jl#L81-L131",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",z,[i("summary",null,[s[140]||(s[140]=i("a",{id:"BasicTypes.terminal_logger-Tuple{}",href:"#BasicTypes.terminal_logger-Tuple{}"},[i("span",{class:"jlbinding"},"BasicTypes.terminal_logger")],-1)),s[141]||(s[141]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[143]||(s[143]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terminal_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns the global <code>TerminalLogger</code> to be used for logging progress bars via <code>ProgressLogging.jl</code> in the REPL.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[142]||(s[142]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/functions.jl#L41-L45",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",K,[i("summary",null,[s[144]||(s[144]=i("a",{id:"BasicTypes.unwrap_optional-Tuple{Type}",href:"#BasicTypes.unwrap_optional-Tuple{Type}"},[i("span",{class:"jlbinding"},"BasicTypes.unwrap_optional")],-1)),s[145]||(s[145]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[147]||(s[147]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unwrap_optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Function used to unwrap the type <code>T</code> from <code>Optional{T}</code>. If the provided type is not of the form <code>Optional{T}</code>, it simply returns it unchanged.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>When calling this function with simply <code>Optional</code> as input, the function throws an error.</p></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes, unwrap_optional, Optional</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unwrap_optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Optional{Float32})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float32</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unwrap_optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float64)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64</span></span></code></pre></div>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[146]||(s[146]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L119-L137",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",H,[i("summary",null,[s[148]||(s[148]=i("a",{id:"BasicTypes.valuetype",href:"#BasicTypes.valuetype"},[i("span",{class:"jlbinding"},"BasicTypes.valuetype")],-1)),s[149]||(s[149]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[151]||(s[151]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">valuetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Return the type of the underlying value contained in <code>x</code>.</p><p>For primitive types like <code>Number</code>, this is the type of <code>x</code> itself. For container types like <code>AbstractArray{T}</code>, this is <code>T</code>.</p><p>For any type that does not explicitly have a custom method for <code>valuetype</code>, the default is to return <code>Union{}</code>.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[150]||(s[150]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/valuetype.jl#L1-L10",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",$,[i("summary",null,[s[152]||(s[152]=i("a",{id:"BasicTypes.@add_kwargs_defaults-Tuple",href:"#BasicTypes.@add_kwargs_defaults-Tuple"},[i("span",{class:"jlbinding"},"BasicTypes.@add_kwargs_defaults")],-1)),s[153]||(s[153]=t()),e(a,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[155]||(s[155]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@add_kwargs_defaults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [defaults_variable_name] function_definition</span></span></code></pre></div><p>This macro is a helper macro to add keyword arguments defaults to a function definition, useful when multiple functions need to share the same keyword arguments defaults and one wants to define them only once within the codebase.</p><p>By explicitly defining each keyword argument (rather than relying on the catchall <code>kwargs...</code>) the user of the function can have autocomplete functionality also for keyword arguments in the REPL.</p><p>This macro will simply cycle through the keyword arguments parsed from the function definition and add defaults to any of the kwargs that do not have a specified default value within the signature. It will only add defaults for kwargs that have a default specified in the <code>NamedTuple</code> object reachable within the caller module&#39;s scope with the variable name provided as the optional first argument of the macro.</p><p>If a custom name is not provided, the macro will look for default assignments in a variable named <code>DEFAULT_KWARGS</code>.</p><p>The macro will return the modified function definition.</p><p>See the <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/api#BasicTypes.@define_kwargs_defaults-Tuple"><code>@define_kwargs_defaults</code></a> macro for a convenience way of defining the kwargs defaults within a module.</p>',7)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[154]||(s[154]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/macros.jl#L91-L105",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",Y,[i("summary",null,[s[156]||(s[156]=i("a",{id:"BasicTypes.@define_kwargs_defaults-Tuple",href:"#BasicTypes.@define_kwargs_defaults-Tuple"},[i("span",{class:"jlbinding"},"BasicTypes.@define_kwargs_defaults")],-1)),s[157]||(s[157]=t()),e(a,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[159]||(s[159]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@define_kwargs_defaults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [defaults_variable_name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kw1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default_value1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kw2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default_value2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>This macro is a helper macro to define keyword arguments defaults to be used in conjuction with the <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/api#BasicTypes.@add_kwargs_defaults-Tuple"><code>@add_kwargs_defaults</code></a> macro.</p><p>Its main argument is a <code>begin...end</code> block that will define the keyword arguments defaults in the form defined in the signature and will assign these defaults to a const <code>NamedTuple</code> variable in the caller module&#39;s scope.</p><p>If only the <code>begin...end</code> block is provided, the macro will assign the resulting <code>NamedTuple</code> to a const variable named <code>DEFAULT_KWARGS</code>. Alternatively, a custom variable name can be provided as the first argument of the macro.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The default values to the RHS of each expression in the <code>begin...end</code> block are simply stored as parsed by the macro, so for any non-literal value, the resulting expression will be stored in the <code>NamedTuple</code>.</p></div><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TestKwargs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@define_kwargs_defaults</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> begin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    boresight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    check_blocking </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@add_kwargs_defaults</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; boresight, check_blocking) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boresight, check_blocking</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@add_kwargs_defaults</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; boresight, check_blocking </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boresight, check_blocking</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TestKwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TestKwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,7)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[158]||(s[158]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/macros.jl#L37-L71",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",X,[i("summary",null,[s[160]||(s[160]=i("a",{id:"BasicTypes.@fallback-Tuple",href:"#BasicTypes.@fallback-Tuple"},[i("span",{class:"jlbinding"},"BasicTypes.@fallback")],-1)),s[161]||(s[161]=t()),e(a,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[163]||(s[163]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Short-circuiting version of <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/api#BasicTypes.fallback"><code>fallback</code></a>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NotProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NotSimulated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, y, z</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span></span></code></pre></div>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[162]||(s[162]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/a8e251b6859a2046deab28760e479fc80ee5245b/src/optionals.jl#L77-L90",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})])])}const ps=p(r,[["render",Z]]);export{ls as __pageData,ps as default};
