import{_ as p,c as h,a7 as e,j as i,a as t,G as n,w as l,B as k,o as r}from"./chunks/framework.BMVocD-_.js";const A=JSON.parse('{"title":"Units","description":"","frontmatter":{},"headers":[],"relativePath":"units.md","filePath":"units.md","lastUpdated":null}'),d={name:"units.md"},o={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""};function C(f,s,b,m,B,v){const a=k("Badge");return r(),h("div",null,[s[30]||(s[30]=e(`<h1 id="Units" tabindex="-1">Units <a class="header-anchor" href="#Units" aria-label="Permalink to &quot;Units {#Units}&quot;">​</a></h1><p>BasicTypes uses Unitful but extends it with some commonly used conventions and functions. First and foremost, it is assumed that SI units are used for all dimensions as the canonical unit.</p><p>Type aliases are provided for commonly used quantities. These aliases accept both quantities of the respective dimensions, as well as unitless real numbers. That is, they are unions of specific quantities and real values. These are intended to be used with the methods below.</p><p>The following aliases are provided: <code>Distance</code>, <code>Mass</code>, <code>Time</code>, <code>Angle</code>, <code>Temperature</code>, <code>Frequency</code>, <code>Power</code>.</p><p>To enforce specific units on both unitful and unitless values, <code>enforce_unit</code> can be used. This enables code like the following</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> orbital_velocity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(altitude</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, planet_mass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, altitude)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, planet_mass)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    R </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6.371e6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    G </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6.67430e-11</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;N*m^2/kg^2&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # gravitational constant</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(G </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> R)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">orbital_velocity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5972e24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,6)),i("details",o,[i("summary",null,[s[0]||(s[0]=i("a",{id:"BasicTypes.enforce_unit",href:"#BasicTypes.enforce_unit"},[i("span",{class:"jlbinding"},"BasicTypes.enforce_unit")],-1)),s[1]||(s[1]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[4]||(s[4]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference, value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference)</span></span></code></pre></div><p>Takes the provided value quantity and converts it to the unit provided as <code>reference</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The provided <code>reference</code> must represent a unit compatible with the unit expected from <code>value</code>.</p></div><p>In case only <code>reference</code> is provided (second signature above), this function simply returns <code>Base.Fix1(enforce_unit, reference)</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>reference</code>: The unit to convert <code>value</code> to. It can be an instance from one of the following types:</p><ul><li><p><code>Unitful.Units</code>: e.g. u&quot;m&quot;.</p></li><li><p><code>Type{&lt;:Quantity}</code>: e.g. typeof(1u&quot;°&quot;).</p></li><li><p><code>Quantity</code>: e.g. 2f0 * u&quot;m/s&quot;.</p></li></ul></li><li><p><code>value</code>: The quantity to convert.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2f0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km/h&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Throws as units are not compatible</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DimensionError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">km) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Also converts to Float32 as the provided reference is a Float32 quantity</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rad&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">°) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Also converts to Float32 as the provided reference is a Float32 quantity</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.17453292f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rad</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Providing a quantity directly also tries to enforce the precision</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InexactError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This will not enforce precision</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> km</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">km </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">∘</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> float </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test the method returning a function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m</span></span></code></pre></div><p>See also: <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/units#BasicTypes.enforce_unitless"><code>enforce_unitless</code></a></p>`,9)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[2]||(s[2]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/b6ee4349dbd7d641363e4438e051587b3f8e5692/src/units.jl#L54-L96",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1}),s[5]||(s[5]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference, value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [interpret_as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Units</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Takes the provided unitless <code>value</code> and converts it to the unit specified by <code>reference</code>. The number is interpreted as the unit specified by <code>interpret_as</code> (if provided) or as the preferred base unit of <code>reference</code> otherwise.</p><p>If <code>reference</code> is a Quantity, the same data type is used for the returned Quantity.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Lengths are interpreted as meters by default</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> km</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Weights use kg by default</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0e6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;°&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Angles are interpreted as radians</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">°</span></span></code></pre></div><p>See also: <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/api#BasicTypes.enforce_unit-Tuple{Any, Number, Unitful.Units}"><code>enforce_unit(reference, value::Unitful.Quantity)</code></a></p>`,5)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[3]||(s[3]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/b6ee4349dbd7d641363e4438e051587b3f8e5692/src/units.jl#L101-L121",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s[31]||(s[31]=i("p",null,"A convenience function is also provided to perform unit enforcement, but returning a raw value instead of a Unitful value.",-1)),i("details",u,[i("summary",null,[s[6]||(s[6]=i("a",{id:"BasicTypes.enforce_unitless",href:"#BasicTypes.enforce_unitless"},[i("span",{class:"jlbinding"},"BasicTypes.enforce_unitless")],-1)),s[7]||(s[7]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[9]||(s[9]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference, value)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reference)</span></span></code></pre></div><p>Takes the provided <code>value</code> (supposed to represent a quantity tied to a specific unit), converts it to the unit represented by <code>reference</code> and then strips the units. This will simply call <code>ustrip(enforce_unit(reference, value))</code>.</p><p>If only <code>reference</code> is provided (second signature above), this function simply returns <code>Base.Fix1(enforce_unitless, reference)</code>.</p><p>See <a href="/juliasatcomframework.github.io/BasicTypes.jl/previews/PR23/units#BasicTypes.enforce_unit"><code>enforce_unit</code></a> for more details on the supported argument types.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicTypes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">km)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000.0f0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">km </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce_unitless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">∘</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> float </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test the method returning a function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000.0</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[8]||(s[8]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/b6ee4349dbd7d641363e4438e051587b3f8e5692/src/units.jl#L129-L154",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s[32]||(s[32]=i("p",null,"For angles, distances, mass, and time, the following functions are also provided for convenience:",-1)),i("details",g,[i("summary",null,[s[10]||(s[10]=i("a",{id:"BasicTypes.raw_angle",href:"#BasicTypes.raw_angle"},[i("span",{class:"jlbinding"},"BasicTypes.raw_angle")],-1)),s[11]||(s[11]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[13]||(s[13]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw_angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [rounding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RoundingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Returns the angle in radians as a unitless number. The optional <code>rounding</code> argument can be used to wrap the returned value within <code>[0, 2π)</code> using the specified rounding mode. ```</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[12]||(s[12]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/b6ee4349dbd7d641363e4438e051587b3f8e5692/src/units.jl#L162-L169",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",E,[i("summary",null,[s[14]||(s[14]=i("a",{id:"BasicTypes.raw_distance",href:"#BasicTypes.raw_distance"},[i("span",{class:"jlbinding"},"BasicTypes.raw_distance")],-1)),s[15]||(s[15]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[17]||(s[17]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw_distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the distance in meters as a unitless number.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[16]||(s[16]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/b6ee4349dbd7d641363e4438e051587b3f8e5692/src/units.jl#L173-L177",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",c,[i("summary",null,[s[18]||(s[18]=i("a",{id:"BasicTypes.raw_mass",href:"#BasicTypes.raw_mass"},[i("span",{class:"jlbinding"},"BasicTypes.raw_mass")],-1)),s[19]||(s[19]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[21]||(s[21]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw_mass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Mass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the mass in kilograms as a unitless number.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[20]||(s[20]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/b6ee4349dbd7d641363e4438e051587b3f8e5692/src/units.jl#L180-L184",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",y,[i("summary",null,[s[22]||(s[22]=i("a",{id:"BasicTypes.raw_time",href:"#BasicTypes.raw_time"},[i("span",{class:"jlbinding"},"BasicTypes.raw_time")],-1)),s[23]||(s[23]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[25]||(s[25]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the time in seconds as a unitless number.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[24]||(s[24]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/b6ee4349dbd7d641363e4438e051587b3f8e5692/src/units.jl#L187-L191",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s[33]||(s[33]=i("p",null,[t("To obtain the canonical unit for a "),i("code",null,"Unitful.Quantity"),t(" or "),i("code",null,"Unitful.Units"),t(", call")],-1)),i("details",F,[i("summary",null,[s[26]||(s[26]=i("a",{id:"BasicTypes.base_unit",href:"#BasicTypes.base_unit"},[i("span",{class:"jlbinding"},"BasicTypes.base_unit")],-1)),s[27]||(s[27]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[29]||(s[29]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">base_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Units</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">base_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Unitful.Quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the SI base unit for the dimension of the provided unit or quantity. In case of angles, the <code>base_unit</code> returns <code>u&quot;rad&quot;</code> when the input is either <code>u&quot;°&quot;</code> or <code>u&quot;rad&quot;</code>.</p>`,2)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[28]||(s[28]=[i("a",{href:"https://github.com/JuliaSatcomFramework/BasicTypes.jl/blob/b6ee4349dbd7d641363e4438e051587b3f8e5692/src/units.jl#L21-L27",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})])])}const D=p(d,[["render",C]]);export{A as __pageData,D as default};
